// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Release extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("project", Value.fromString(""));
    this.set("tag", Value.fromString(""));
    this.set("releaseCID", Value.fromString(""));
    this.set("signers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Release entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Release entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Release", id.toString(), this);
    }
  }

  static load(id: string): Release | null {
    return changetype<Release | null>(store.get("Release", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get tag(): string {
    let value = this.get("tag");
    return value!.toString();
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }

  get releaseCID(): string {
    let value = this.get("releaseCID");
    return value!.toString();
  }

  set releaseCID(value: string) {
    this.set("releaseCID", Value.fromString(value));
  }

  get signers(): Array<string> {
    let value = this.get("signers");
    return value!.toStringArray();
  }

  set signers(value: Array<string>) {
    this.set("signers", Value.fromStringArray(value));
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("team", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("metaCID", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Project entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Project", id.toString(), this);
    }
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get team(): string {
    let value = this.get("team");
    return value!.toString();
  }

  set team(value: string) {
    this.set("team", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metaCID(): string {
    let value = this.get("metaCID");
    return value!.toString();
  }

  set metaCID(value: string) {
    this.set("metaCID", Value.fromString(value));
  }

  get releases(): Array<string> {
    let value = this.get("releases");
    return value!.toStringArray();
  }

  set releases(value: Array<string>) {
    this.set("releases", Value.fromStringArray(value));
  }

  get keys(): Array<string> {
    let value = this.get("keys");
    return value!.toStringArray();
  }

  set keys(value: Array<string>) {
    this.set("keys", Value.fromStringArray(value));
  }
}

export class Team extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("metaCID", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Team entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Team entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Team", id.toString(), this);
    }
  }

  static load(id: string): Team | null {
    return changetype<Team | null>(store.get("Team", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metaCID(): string {
    let value = this.get("metaCID");
    return value!.toString();
  }

  set metaCID(value: string) {
    this.set("metaCID", Value.fromString(value));
  }

  get projects(): Array<string> {
    let value = this.get("projects");
    return value!.toStringArray();
  }

  set projects(value: Array<string>) {
    this.set("projects", Value.fromStringArray(value));
  }

  get keys(): Array<string> {
    let value = this.get("keys");
    return value!.toStringArray();
  }

  set keys(value: Array<string>) {
    this.set("keys", Value.fromStringArray(value));
  }
}

export class Key extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("role", Value.fromString(""));
    this.set("address", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Key entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Key entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Key", id.toString(), this);
    }
  }

  static load(id: string): Key | null {
    return changetype<Key | null>(store.get("Key", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get role(): string {
    let value = this.get("role");
    return value!.toString();
  }

  set role(value: string) {
    this.set("role", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get team(): string | null {
    let value = this.get("team");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set team(value: string | null) {
    if (!value) {
      this.unset("team");
    } else {
      this.set("team", Value.fromString(<string>value));
    }
  }

  get project(): string | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set project(value: string | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromString(<string>value));
    }
  }
}

export class Activity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("text", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Activity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Activity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Activity", id.toString(), this);
    }
  }

  static load(id: string): Activity | null {
    return changetype<Activity | null>(store.get("Activity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get text(): string {
    let value = this.get("text");
    return value!.toString();
  }

  set text(value: string) {
    this.set("text", Value.fromString(value));
  }
}
